(()=>{"use strict";var e={"./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js":(e,s,t)=>{t.r(s),t.d(s,{MIME_TYPE_JAVASCRIPT:()=>r,MIME_TYPE_WASM:()=>a,CORE_VERSION:()=>o,CORE_URL:()=>E,FFMessageType:()=>p});const r="text/javascript",a="application/wasm",o="0.12.6",E=`https://unpkg.com/@ffmpeg/core@${o}/dist/umd/ffmpeg-core.js`;var p;!function(e){e.LOAD="LOAD",e.EXEC="EXEC",e.WRITE_FILE="WRITE_FILE",e.READ_FILE="READ_FILE",e.DELETE_FILE="DELETE_FILE",e.RENAME="RENAME",e.CREATE_DIR="CREATE_DIR",e.LIST_DIR="LIST_DIR",e.DELETE_DIR="DELETE_DIR",e.ERROR="ERROR",e.DOWNLOAD="DOWNLOAD",e.PROGRESS="PROGRESS",e.LOG="LOG",e.MOUNT="MOUNT",e.UNMOUNT="UNMOUNT"}(p||(p={}))},"./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js":(e,s,t)=>{t.r(s),t.d(s,{ERROR_UNKNOWN_MESSAGE_TYPE:()=>r,ERROR_NOT_LOADED:()=>a,ERROR_TERMINATED:()=>o,ERROR_IMPORT_FAILURE:()=>E});const r=new Error("unknown message type"),a=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),o=new Error("called FFmpeg.terminate()"),E=new Error("failed to import ffmpeg-core.js")}},s={};function t(r){var a=s[r];if(void 0!==a)return a.exports;var o=s[r]={exports:{}};return e[r](o,o.exports,t),o.exports}t.d=(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},t.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{t.r(r);var e=t("./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js"),s=t("./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js");let a;self.onmessage=async({data:{id:t,type:r,data:o}})=>{const E=[];let p;try{if(r!==e.FFMessageType.LOAD&&!a)throw s.ERROR_NOT_LOADED;switch(r){case e.FFMessageType.LOAD:p=await(async({coreURL:t,wasmURL:r,workerURL:o})=>{const E=!a;try{t||(t=e.CORE_URL),importScripts(t)}catch{if(t||(t=e.CORE_URL.replace("/umd/","/esm/")),self.createFFmpegCore=(await import(t)).default,!self.createFFmpegCore)throw s.ERROR_IMPORT_FAILURE}const p=t,R=r||t.replace(/.js$/g,".wasm"),n=o||t.replace(/.js$/g,".worker.js");return a=await self.createFFmpegCore({mainScriptUrlOrBlob:`${p}#${btoa(JSON.stringify({wasmURL:R,workerURL:n}))}`}),a.setLogger((s=>self.postMessage({type:e.FFMessageType.LOG,data:s}))),a.setProgress((s=>self.postMessage({type:e.FFMessageType.PROGRESS,data:s}))),E})(o);break;case e.FFMessageType.EXEC:p=(({args:e,timeout:s=-1})=>{a.setTimeout(s),a.exec(...e);const t=a.ret;return a.reset(),t})(o);break;case e.FFMessageType.WRITE_FILE:p=(({path:e,data:s})=>(a.FS.writeFile(e,s),!0))(o);break;case e.FFMessageType.READ_FILE:p=(({path:e,encoding:s})=>a.FS.readFile(e,{encoding:s}))(o);break;case e.FFMessageType.DELETE_FILE:p=(({path:e})=>(a.FS.unlink(e),!0))(o);break;case e.FFMessageType.RENAME:p=(({oldPath:e,newPath:s})=>(a.FS.rename(e,s),!0))(o);break;case e.FFMessageType.CREATE_DIR:p=(({path:e})=>(a.FS.mkdir(e),!0))(o);break;case e.FFMessageType.LIST_DIR:p=(({path:e})=>{const s=a.FS.readdir(e),t=[];for(const r of s){const s=a.FS.stat(`${e}/${r}`),o=a.FS.isDir(s.mode);t.push({name:r,isDir:o})}return t})(o);break;case e.FFMessageType.DELETE_DIR:p=(({path:e})=>(a.FS.rmdir(e),!0))(o);break;case e.FFMessageType.MOUNT:p=(({fsType:e,options:s,mountPoint:t})=>{const r=e,o=a.FS.filesystems[r];return!!o&&(a.FS.mount(o,s,t),!0)})(o);break;case e.FFMessageType.UNMOUNT:p=(({mountPoint:e})=>(a.FS.unmount(e),!0))(o);break;default:throw s.ERROR_UNKNOWN_MESSAGE_TYPE}}catch(s){return void self.postMessage({id:t,type:e.FFMessageType.ERROR,data:s.toString()})}p instanceof Uint8Array&&E.push(p.buffer),self.postMessage({id:t,type:r,data:p},E)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,